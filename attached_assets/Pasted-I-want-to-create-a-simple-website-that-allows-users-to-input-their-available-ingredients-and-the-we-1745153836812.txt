I want to create a simple website that allows users to input their available ingredients, and the website will suggest recipes based on those ingredients. The website should include the following features:

1. **Ingredient Input**: The user can enter the ingredients they have available.
2. **Recipe Suggestions**: Based on the entered ingredients, the website will display cooking recipes that contain those ingredients.
3. **YouTube Videos**: For each suggested recipe, a YouTube video related to it (showing how to prepare the recipe) should be displayed.
4. **Simple and Clear UI**: The interface should be easy to use, with the ability to add and remove ingredients, and search for recipes.
5. **Performance Optimization**: The website should be fast and not require heavy loading.
6. **Error Handling**: If the ingredients entered are insufficient for recipes, display a message to the user, and suggest alternative ingredients if possible.
7. **Ingredient Check**: If the entered ingredients match previous recipes, the website should display those recipes without making a new request to the server.

### Website Structure:
- **HTML**:
    - A field to input ingredients.
    - A list to display the added ingredients.
    - A "Find Recipes" button to search based on the entered ingredients.
    - Display the recipe results with YouTube videos attached.
    - Ability to clear the ingredients and re-enter them.

- **CSS**:
    - A simple design for the interface that works well with right-to-left languages (Arabic).
    - Proper formatting for the ingredient list, recipe cards, and video display.

- **JavaScript**:
    - A function to add ingredients.
    - A function to remove ingredients.
    - A function to make a request to **OpenAI API** to get recipe suggestions based on the entered ingredients.
    - Use **YouTube API** to fetch related videos.
    - Handle cases where no recipes are available.

### Example JavaScript Function:
```javascript
let ingredients = [];

function addIngredient() {
    const input = document.getElementById('ingredientInput');
    const value = input.value.trim();
    if (value) {
        ingredients.push(value);
        input.value = '';
        updateIngredientsList();
    }
}

function removeIngredient(index) {
    ingredients = ingredients.filter((_, i) => i !== index);
    updateIngredientsList();
}

function updateIngredientsList() {
    const list = document.getElementById('ingredientsList');
    list.innerHTML = ingredients.map((ingredient, index) => `
        <div class="ingredient-item" onclick="removeIngredient(${index})">
            ${ingredient} ×
        </div>
    `).join('');
}

async function findRecipes() {
    const OPENAI_API_KEY = 'YOUR_OPENAI_API_KEY';  // ← Replace with your key
    const YOUTUBE_API_KEY = 'YOUR_YOUTUBE_API_KEY'; // ← Replace with your key

    const button = document.getElementById('findRecipesBtn');

    if (ingredients.length === 0) {
        alert('Please add ingredients first!');
        return;
    }

    button.disabled = true;
    button.textContent = 'Searching... ⏳';

    try {
        const response = await fetch('https://api.openai.com/v1/chat/completions', {
            method: 'POST',
            headers: {
                'Content-Type': 'application/json',
                'Authorization': `Bearer ${OPENAI_API_KEY}`,
            },
            body: JSON.stringify({
                model: 'gpt-3.5-turbo',
                messages: [
                    {
                        role: 'system',
                        content: 'You are a professional chef. Suggest easy and quick recipes using only the available ingredients.'
                    },
                    {
                        role: 'user',
                        content: `The available ingredients: ${ingredients.join(', ')}. Suggest 3 recipes with a brief explanation for each.`
                    }
                ],
                temperature: 0.7,
            })
        });

        if (!response.ok) throw new Error(`Connection error: ${response.status}`);

        const data = await response.json();
        const reply = data.choices[0].message.content;

        document.getElementById('recipes').innerHTML = `
            <div class="recipe-card chatgpt-result">
                <pre style="white-space: pre-wrap; direction: rtl;">${reply}</pre>
            </div>
        `;

        // Fetch YouTube videos
        const titles = extractRecipeTitles(reply);
        if (titles.length > 0) {
            const videos = await fetchYouTubeVideos(titles, YOUTUBE_API_KEY);
            appendVideosToRecipes(videos);
        }
    } catch (error) {
        console.error('Error:', error);
        document.getElementById('recipes').innerHTML = `
            <div class="error">⚠️ Failed to fetch recipes: ${error.message}</div>
        `;
    } finally {
        button.disabled = false;
        button.textContent = 'Find Recipes';
    }
}

function extractRecipeTitles(reply) {
    const regex = /^\d+\.\s*(.+)$/gm;
    let match;
    const titles = [];
    while ((match = regex.exec(reply)) !== null) {
        titles.push(match[1].split(':')[0].trim());
    }
    return titles;
}

async function fetchYouTubeVideos(titles, apiKey) {
    const videos = [];
    for (let title of titles) {
        const query = encodeURIComponent(title + ' cooking');
        const url = `https://www.googleapis.com/youtube/v3/search?part=snippet&q=${query}&type=video&maxResults=1&key=${apiKey}`;

        try {
            const response = await fetch(url);
            const data = await response.json();
            const video = data.items[0];
            if (video) {
                videos.push({
                    title: video.snippet.title,
                    videoId: video.id.videoId,
                });
            }
        } catch (err) {
            console.error('Error fetching YouTube videos:', err);
        }
    }
    return videos;
}

function appendVideosToRecipes(videos) {
    const container = document.getElementById('recipes');
    videos.forEach(video => {
        const videoDiv = document.createElement('div');
        videoDiv.className = 'video-result';
        videoDiv.innerHTML = `
            <h4>${video.title}</h4>
            <iframe width="100%" height="215" src="https://www.youtube.com/embed/${video.videoId}" 
                frameborder="0" allowfullscreen></iframe>
        `;
        container.appendChild(videoDiv);
    });
}
